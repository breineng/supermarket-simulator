## Project Intelligence

_This file will store learned patterns, user preferences, and project-specific insights._

## Правила использования BInject

### КРИТИЧЕСКИ ВАЖНОЕ ПРАВИЛО - НИКОГДА НЕ НАРУШАТЬ!
**ЗАПРЕЩЕНО использовать следующие методы поиска объектов:**
- `FindObjectOfType<T>()`
- `FindObjectsOfType<T>()`
- `GameObject.Find()`
- `GameObject.FindWithTag()`
- `GameObject.FindGameObjectWithTag()`
- `GameObject.FindGameObjectsWithTag()`
- Любые другие методы прямого поиска объектов в сцене

**ВМЕСТО ЭТОГО:** Всегда используйте внедрение зависимостей через BInject. Если нужна ссылка на объект - она должна быть внедрена через `[Inject]` атрибут или передана через конструктор/метод.

### Правило создания сервисов
**НЕ СОЗДАВАЙТЕ сервис как MonoBehaviour, если он НЕ использует:**
- Методы жизненного цикла Unity (Update, FixedUpdate, LateUpdate и т.д.)
- Корутины (StartCoroutine)
- Компоненты Unity (GetComponent, transform и т.д.)
- События Unity (OnCollisionEnter, OnTriggerEnter и т.д.)

**Если сервису нужны только зависимости и бизнес-логика** - создавайте его как обычный C# класс (POCO).

### Правила внедрения зависимостей в BInject

1.  **Для `MonoBehaviour` компонентов:**
    *   Используйте атрибут `[Inject]` для внедрения зависимостей в публичные поля, свойства или методы.
    *   Unity управляет созданием экземпляров `MonoBehaviour`, поэтому прямой вызов конструктора с параметрами невозможен. `[Inject]` позволяет BInject заполнить зависимости после создания объекта.

2.  **Для обычных C# классов (POCO - Plain Old C# Objects):**
    *   Внедрение зависимостей должно происходить **через конструктор класса**.
    *   Не используйте атрибут `[Inject]` на методах или свойствах этих классов для основного внедрения зависимостей.
    *   При регистрации таких классов в `Context` используйте методы, которые позволяют BInject автоматически создавать экземпляры и разрешать зависимости конструктора, например:
        *   `context.RegisterType<TConcrete>()` (если регистрируете только конкретный тип)
        *   `context.RegisterTypeAs<TConcrete, TInterface>()` (если регистрируете конкретный тип под интерфейсом)
    *   BInject выберет конструктор (обычно самый "жадный" - с наибольшим количеством параметров, которые он может разрешить, либо помеченный `[Inject]`, но для POCO мы избегаем `[Inject]` на конструкторе) и передаст в него необходимые зависимости.
    *   Если класс не имеет зависимостей в конструкторе или вы хотите предоставить уже созданный экземпляр, можно использовать `context.RegisterDependencyAs<TConcrete, TInterface>(new TConcrete(...))` или `context.RegisterDependency<TConcrete>(new TConcrete(...))`. 

3.  **Атрибут `[Inject]` (и аналогичный по механизму `[Create]`)** в пакете `com.sergeysychov.behaviour_inject` для `MonoBehaviour` используется для внедрения зависимостей в:
    *   Публичные поля (public fields)
    *   Публичные свойства (public properties)
    *   Публичные методы (public methods)
    *(Это правило уже было, но я его совмещаю с новым для полноты картины)*

4.  **Использование `internal` классов:**
    *   Классы из пространства имен `BehaviourInject.Internal` (и другие классы, помеченные как `internal` в библиотеке `com.sergeysychov.behaviour_inject`) не должны использоваться напрямую в коде проекта. Следует использовать только публичный API библиотеки, предоставляемый в основном пространстве имен `BehaviourInject`. 
    *(Это правило уже было)*

5.  **Видимость членов для `[Inject]` на `MonoBehaviour`:**
    *   При использовании атрибута `[Inject]` на `MonoBehaviour` компонентах, внедряемые поля или свойства **должны быть объявлены как `public`**. Внедрение в `private` или `protected` члены может не работать или приводить к тому, что зависимость останется `null` (как было выявлено при отладке `GameUIHandler`). Это уточняет и дополняет правило №1 и №3. 